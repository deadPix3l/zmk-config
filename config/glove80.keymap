/* 
Glove80 Flash instructions

- hold bottom outside key (RF5, RF5) and ring finger above home row (RT3, LT3)
- plug in (check that light pulses slowly, indicating bootloader mode)

- sudo mount /dev/XXX /mnt/usb
- cp *.uf2 /mnt/usb
- umount /mnt/usb
*/

#include <behaviors.dtsi>
/* Include all behaviour includes needed */
#include <dt-bindings/zmk/outputs.h>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/rgb.h>

#include "../zmk-nodefree-config/helper.h"

/* source keypos definitions */
#include "../zmk-nodefree-config/keypos_def/keypos_glv80.h"

/* activate bluetooth */
#define CONFIG_WIRELESS 1

/* To deal with the situation where there is no Lower layer, to keep &lower happy */
#ifndef LAYER_Lower
#define LAYER_Lower 0
#endif

// Home row mods - whitelists for each hand
#define KEYS_L LC1 LC2 LC3 LC4 LC5 LN0 LN1 LN2 LN3 LN4 LN5 LT0 LT1 LT2 LT3 LT4 LT5 LM0 LM1 LM2 LM3 LM4 LM5 LB0 LB1 LB2 LB3 LB4 LB5 LF1 LF2 LF3 LF4 LF5
#define KEYS_R RC1 RC2 RC3 RC4 RC5 RN0 RN1 RN2 RN3 RN4 RN5 RT0 RT1 RT2 RT3 RT4 RT5 RM0 RM1 RM2 RM3 RM4 RM5 RB0 RB1 RB2 RB3 RB4 RB5 RF1 RF2 RF3 RF4 RF5
#define THUMBS LH0 LH1 LH2 LH3 LH4 LH5 RH0 RH1 RH2 RH3 RH4 RH5

// Magic key (glove80 factory macro)
ZMK_BEHAVIOR(magic, hold_tap,
    flavor = "tap-preferred";
    tapping-term-ms = <200>;
    bindings = <&mo>, <&rgb_ug_status_macro>;
)

/* left-hand HRMs */
ZMK_BEHAVIOR(hml, hold_tap,
    flavor = "balanced";
    tapping-term-ms = <500>;
    quick-tap-ms = <175>;                // repeat on tap-into-hold
    require-prior-idle-ms = <200>;
    bindings = <&kp>, <&kp>;
    hold-trigger-key-positions = <KEYS_R THUMBS>;
    hold-trigger-on-release;             // delay positional check until key-release
)

/* right-hand HRMs */
ZMK_BEHAVIOR(hmr, hold_tap,
    flavor = "balanced";
    tapping-term-ms = <300>;
    quick-tap-ms = <175>;                // repeat on tap-into-hold
    require-prior-idle-ms = <200>;
    bindings = <&kp>, <&kp>;
    hold-trigger-key-positions = <KEYS_L THUMBS>;
    hold-trigger-on-release;             // delay positional check until key-release
)

GLV80_LAYER(engram,
/* ╭─────────────┬─────────────┬─────────────┬─────────────┬─────────────╮                               ╭─────────────┬─────────────┬─────────────┬─────────────┬─────────────╮ */
      &kp F1        &kp F2        &kp F3        &kp F4        &kp F5                                        &kp F6        &kp F7        &kp F8        &kp F9        &kp F10
/* ├─────────────┼─────────────┼─────────────┼─────────────┼─────────────┼─────────────╮   ╭─────────────┼─────────────┼─────────────┼─────────────┼─────────────┼─────────────┤ */
      &kp EQUAL     &kp N1        &kp N2        &kp N3        &kp N4        &kp N5           &kp N6         &kp N7        &kp N8        &kp N9        &kp N0        &kp MINUS
/* ├─────────────┼─────────────┼─────────────┼─────────────┼─────────────┼─────────────┤   ├─────────────┼─────────────┼─────────────┼─────────────┼─────────────┼─────────────┤ */
      &kp TAB       &kp B         &kp Y         &kp O         &kp U         &kp SQT          &kp SEMI       &kp L         &kp D         &kp W         &kp V         &kp Z
/* ├─────────────┼─────────────┼─────────────┼─────────────┼─────────────┼─────────────┤   ├─────────────┼─────────────┼─────────────┼─────────────┼─────────────┼─────────────┤ */
      &kp ESC      &hml LGUI C   &hml LALT I  &hml LCTRL E   &hml LSHFT A   &kp COMMA        &kp DOT       &hmr RSHFT H  &hmr RCTRL T  &hmr RALT S   &hmr RGUI N    &kp Q
/* ├─────────────┼─────────────┼─────────────┼─────────────┼─────────────┼─────────────┤   ├─────────────┼─────────────┼─────────────┼─────────────┼─────────────┼─────────────┤ */
      &kp GRAVE     &kp G         &kp X         &kp J         &kp K         &kp MINUS    ,   &kp FSLH        &kp R        &kp M         &kp F         &kp P         &kp PG_UP
/* ├─────────────┼─────────────┼─────────────┼─────────────┼─────────────┼─────────────╯   ╰─────────────┼─────────────┼─────────────┼─────────────┼─────────────┼─────────────┤ */
      &none         &kp HOME      &kp END       &kp LEFT      &kp RIGHT                  ,                   &kp UP       &kp DOWN      &kp LBKT      &kp RBKT      &kp PG_DN
/* ╰─────────────┴─────────────┴────────────┴─────────────┴─────────────╯                                ╰─────────────┴─────────────┴─────────────┴─────────────┴─────────────╯ */
                                                                                         ,
/*                                   ╭─────────────┬─────────────┬─────────────╮                   ╭─────────────┬─────────────┬─────────────╮                                         */
                                       &none         &none         &none                              &none         &none          &none
/*                                   ├─────────────┼─────────────┼─────────────┤      */ , /*      ├─────────────┼─────────────┼─────────────┤                                         */
                                       &kp BSPC      &kp DEL       &kp LALT                           &kp RALT     &kp RET       &kp SPACE
/*                                   ╰─────────────┴─────────────┴─────────────╯                   ╰─────────────┴─────────────┴─────────────╯                                         */
)

// /* Automatically generated layer name #define */
// #define LAYER_engram 0
// #define LAYER_Lower 1
// #define LAYER_colmak_dh 2
// #define LAYER_qwerty 3
// #define LAYER_Magic 4
// #define LAYER_layouts 5



/* Custom Device-tree */



// /* Glove80 system behavior & macros */
// / {
//     behaviors {
//         // For the "layer" key, it'd nice to be able to use it as either a shift or a toggle.
//         // Configure it as a tap dance, so the first tap (or hold) is a &mo and the second tap is a &to
//         lower: lower {
//             compatible = "zmk,behavior-tap-dance";
//             label = "LAYER_TAP_DANCE";
//             #binding-cells = <0>;
//             tapping-term-ms = <200>;
//             bindings = <&mo LAYER_Lower>, <&to LAYER_Lower>;
//         };
//     };
// };

// / {
//     macros {
//         rgb_ug_status_macro: rgb_ug_status_macro {
//             label = "RGB_UG_STATUS";
//             compatible = "zmk,behavior-macro";
//             #binding-cells = <0>;
//             bindings
//                 = <&rgb_ug RGB_STATUS>;
//         };
//     };
// };


// / {
// #ifdef BT_DISC_CMD
//     behaviors {
//         bt_0: bt_0 {
//             compatible = "zmk,behavior-tap-dance";
//             label = "BT_0";
//             #binding-cells = <0>;
//             tapping-term-ms = <200>;
//             bindings = <&bt_select_0>, <&bt BT_DISC 0>;
//         };
//         bt_1: bt_1 {
//             compatible = "zmk,behavior-tap-dance";
//             label = "BT_1";
//             #binding-cells = <0>;
//             tapping-term-ms = <200>;
//             bindings = <&bt_select_1>, <&bt BT_DISC 1>;
//         };
//         bt_2: bt_2 {
//             compatible = "zmk,behavior-tap-dance";
//             label = "BT_2";
//             #binding-cells = <0>;
//             tapping-term-ms = <200>;
//             bindings = <&bt_select_2>, <&bt BT_DISC 2>;
//         };
//         bt_3: bt_3 {
//             compatible = "zmk,behavior-tap-dance";
//             label = "BT_3";
//             #binding-cells = <0>;
//             tapping-term-ms = <200>;
//             bindings = <&bt_select_3>, <&bt BT_DISC 3>;
//         };
//     };
//     macros {
//         bt_select_0: bt_select_0 {
//             label = "BT_SELECT_0";
//             compatible = "zmk,behavior-macro";
//             #binding-cells = <0>;
//             bindings
//                 = <&out OUT_BLE>,
//                   <&bt BT_SEL 0>;
//         };
//         bt_select_1: bt_select_1 {
//             label = "BT_SELECT_1";
//             compatible = "zmk,behavior-macro";
//             #binding-cells = <0>;
//             bindings
//                 = <&out OUT_BLE>,
//                   <&bt BT_SEL 1>;
//         };
//         bt_select_2: bt_select_2 {
//             label = "BT_SELECT_2";
//             compatible = "zmk,behavior-macro";
//             #binding-cells = <0>;
//             bindings
//                 = <&out OUT_BLE>,
//                   <&bt BT_SEL 2>;
//         };
//         bt_select_3: bt_select_3 {
//             label = "BT_SELECT_3";
//             compatible = "zmk,behavior-macro";
//             #binding-cells = <0>;
//             bindings
//                 = <&out OUT_BLE>,
//                   <&bt BT_SEL 3>;
//         };
//     };
// #else
//     macros {
//         bt_0: bt_0 {
//             label = "BT_0";
//             compatible = "zmk,behavior-macro";
//             #binding-cells = <0>;
//             bindings
//                 = <&out OUT_BLE>,
//                   <&bt BT_SEL 0>;
//         };
//         bt_1: bt_1 {
//             label = "BT_1";
//             compatible = "zmk,behavior-macro";
//             #binding-cells = <0>;
//             bindings
//                 = <&out OUT_BLE>,
//                   <&bt BT_SEL 1>;
//         };
//         bt_2: bt_2 {
//             label = "BT_2";
//             compatible = "zmk,behavior-macro";
//             #binding-cells = <0>;
//             bindings
//                 = <&out OUT_BLE>,
//                   <&bt BT_SEL 2>;
//         };
//         bt_3: bt_3 {
//             label = "BT_3";
//             compatible = "zmk,behavior-macro";
//             #binding-cells = <0>;
//             bindings
//                 = <&out OUT_BLE>,
//                   <&bt BT_SEL 3>;
//         };
//     };
// #endif
// };

// / {
//     behaviors {
//         magic: magic {
//             compatible = "zmk,behavior-hold-tap";
//             label = "MAGIC_HOLD_TAP";
//             #binding-cells = <2>;
//             flavor = "tap-preferred";
//             tapping-term-ms = <200>;
//             bindings = <&mo>, <&rgb_ug_status_macro>;
//         };
//     };
// };

